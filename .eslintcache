[{"/Users/kevin/Documents/GitHub/anime-generator/src/index.js":"1","/Users/kevin/Documents/GitHub/anime-generator/src/App.js":"2","/Users/kevin/Documents/GitHub/anime-generator/src/reportWebVitals.js":"3","/Users/kevin/Documents/GitHub/anime-generator/src/CompletedAnime.js":"4","/Users/kevin/Documents/GitHub/anime-generator/src/Sidebar.js":"5","/Users/kevin/Documents/GitHub/anime-generator/src/404.js":"6","/Users/kevin/Documents/GitHub/anime-generator/src/GenreData.js":"7"},{"size":500,"mtime":1609061177046,"results":"8","hashOfConfig":"9"},{"size":786,"mtime":1609062938244,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1608059847153,"results":"11","hashOfConfig":"9"},{"size":3705,"mtime":1609559906776,"results":"12","hashOfConfig":"9"},{"size":6329,"mtime":1609560104289,"results":"13","hashOfConfig":"9"},{"size":177,"mtime":1609036078014,"results":"14","hashOfConfig":"9"},{"size":4283,"mtime":1608199972446,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"x4h3z",{"filePath":"19","messages":"20","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/kevin/Documents/GitHub/anime-generator/src/index.js",[],["35","36"],"/Users/kevin/Documents/GitHub/anime-generator/src/App.js",["37","38","39","40"],"import React from 'react'\nimport './App.css'\nimport Sidebar from './Sidebar'\nimport { BrowserRouter as Router, Switch, Redirect } from \"react-router-dom\"\nimport NotFoundPage from './404'\nimport CompletedAnime from './CompletedAnime'\n\nimport { HashRouter, Route, Link } from \"react-router-dom\";\n\nclass App extends React.Component{\n\n  render(){\n      return (\n        //HashRouter will read everything after the # in the URL\n        <HashRouter> \n          <Switch>\n          <Route exact path=\"/\" component={Sidebar} />\n          <Route path=\"/completedanime\" component={CompletedAnime} />\n          {/* <Route exact path=\"/404\"  component={NotFoundPage} />\n          <Redirect to=\"/404\" /> Has to be last */}\n          </Switch>\n        </HashRouter>\n      )\n  }\n}\n\nexport default App;\n","/Users/kevin/Documents/GitHub/anime-generator/src/reportWebVitals.js",[],"/Users/kevin/Documents/GitHub/anime-generator/src/CompletedAnime.js",["41","42","43","44","45"],"import React from \"react\"\nimport {NavLink} from \"react-router-dom\"\n\nclass CompletedAnime extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n          animeList: [\"\"],\n          isLoading: true,\n          animePage: 1,\n        }\n        this.loadanimePage = this.loadanimePage.bind(this)\n        this.incrementPage = this.incrementPage.bind(this)\n        this.decrementPage = this.decrementPage.bind(this)\n      }\n      \n      componentDidMount(){\n        this.loadanimePage()\n        if (this.props.location.state != null){\n          \n        }\n      }\n\n      loadWatchedAnime(){\n        console.log(this.props.location.state)\n        this.setState({animeList: this.props.location.state})\n        this.state.animeList.map((list) => (\n          <div key={list.mal_id}>\n            <a href={list.url} target=\"_blank\"> {list.title} </a>\n            <div><img src={list.image_url} /></div>\n          </div>\n        ))\n      }\n\n      incrementPage(){\n        this.setState({animePage: this.state.animePage + 1})\n        setTimeout(() => {\n          this.loadanimePage()\n        }, 100)\n      }\n      \n      decrementPage(){\n        this.setState({animePage: this.state.animePage - 1})\n        setTimeout(() => {\n          this.loadanimePage()\n        }, 100)\n      }\n      \n      loadanimePage(){  \n        this.setState({isLoading: false})\n        fetch(\"https://jikan1.p.rapidapi.com/genre/anime/1/\" + this.state.animePage, {\n          \"method\": \"GET\",\n          \"headers\": {\n            \"x-rapidapi-key\": \"542c3ca589msh41c910fdd2fb3e6p174e03jsnb59816e25977\",\n            \"x-rapidapi-host\": \"jikan1.p.rapidapi.com\"\n          }\n        })\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            animeList: json.anime,\n            isLoading: true\n          })\n            console.log(this.state.animeList)\n        })\n      }\n      \n        render(props){\n          var {isLoading, animeList} = this.state\n      \n          if (!isLoading){    \n            return(\n              <div>\n                Loading...\n              </div>\n            )\n          }\n          else{\n            return (\n              <div className=\"App\">\n                {/* <div className=\"TopBar\"></div>*/}\n                <div className=\"MainPage\">\n                  <div className=\"Sidebar\">\n                    <ul className=\"SidebarList\">\n                      {/* <h1 className=\"row\" style={{color:\"black\"}} onClick={()=>{window.location.pathname = \"/anime-generator\"}}>Home</h1>\n                      <h2 className=\"row\" style={{color:\"black\"}} onClick={()=>{window.location.pathname = \"/anime-generator/completedanimep\"}}>Watched</h2> */}\n                      <h1 className=\"row\" style={{color:\"black\"}}> <NavLink className=\"NavLink\" to=\"/\">Home</NavLink></h1>\n                      <h2 className=\"row\" style={{color:\"black\"}}> <NavLink className=\"NavLink\" to=\"/completedanime\">Watched</NavLink> </h2>\n                    </ul>\n                  </div>\n                <div className=\"Randomizer\">\n                  {/* <button onClick={this.decrementPage}>Previous Page</button>\n                  <button onClick={this.incrementPage}>Next Page</button>\n                  <h1>Page: {this.state.animePage}</h1> */}\n                  {this.props.location.state.listcomplete.map((list) => (\n                    <div key={list.mal_id}>\n                      <a href={list.url} target=\"_blank\"> {list.title} </a>\n                      <div><img src={list.image_url} /></div>\n                    </div>\n                  ))}\n                </div>\n                </div>\n              </div>\n            )\n          }\n        }\n}\n\nexport default CompletedAnime","/Users/kevin/Documents/GitHub/anime-generator/src/Sidebar.js",["46","47"],"import React from 'react'\nimport {GenreData} from './GenreData'\nimport { NavLink } from \"react-router-dom\"\n\nclass Sidebar extends React.Component{\n\n    constructor(){\n        super()\n        this.state = {\n           animeList: [\"\"],\n           i: 0,\n           page: 1,\n           showGenre: true,\n           watchList: [],\n           genre: 1, \n            /* \n            Action: 1\n            Adventure: 2\n            Cars: 3\n            Comedy: 4\n            Dementia: 5\n            Demons: 6\n            Mystery: 7\n            Drama: 8\n            Ecchi: 9\n            Fantasy: 10\n            Game: 11\n            Hentai: 12\n            Historical: 13\n            Horror: 14\n            Kids: 15\n            Magic: 16\n            Martial Arts: 17\n            Mecha: 18\n            Music: 19\n            Parody: 20\n            Samurai: 21\n            Romance: 22\n            School: 23\n            Sci Fi: 24\n            Shoujo: 25\n            Shoujo Ai: 26\n            Shounen: 27\n            Shounen Ai: 28\n            Space: 29\n            Sports: 30\n            Super Power: 31\n            Vampire: 32\n            Yaoi: 33\n            Yuri: 34\n            Harem: 35\n            Slice Of Life: 36\n            Supernatural: 37\n            Military: 38\n            Police: 39\n            Psychological: 40\n            Thriller: 41\n            Seinen: 42\n            Josei: 43\n            */\n        }\n        this.loadanimePage = this.loadanimePage.bind(this)\n        this.nextRandomAnime = this.nextRandomAnime.bind(this)\n        this.getGenre = this.getGenre.bind(this)\n        this.changePage = this.changePage.bind(this)\n        this.watchedAnime = this.watchedAnime.bind(this)\n    }\n\n    componentDidMount(){\n        this.loadanimePage()\n    }\n\n    loadanimePage(){  \n        fetch(\"https://jikan1.p.rapidapi.com/genre/anime/\" + this.state.genre + \"/\" + this.state.page, {\n          \"method\": \"GET\",\n          \"headers\": {\n            \"x-rapidapi-key\": \"542c3ca589msh41c910fdd2fb3e6p174e03jsnb59816e25977\",\n            \"x-rapidapi-host\": \"jikan1.p.rapidapi.com\"\n          }\n        })\n        .then(res => res.json())\n        .then(json => {\n          this.setState({\n            animeList: json.anime,\n            isLoading: true\n          })\n            console.log(this.state.animeList[this.state.i])\n        })\n      }\n\n    nextRandomAnime(){\n        this.setState({\n            i: this.state.i + 1\n        })\n    }\n\n    getGenre(props){\n        this.setState({\n          genre: props,\n          isLoading: false\n        })\n        setTimeout(() => {\n            this.loadanimePage()\n          }, 100)\n    }\n\n    toggleGenre(){\n      this.setState(prevState => ({\n        showGenre: !prevState.showGenre\n      }))\n    }\n\n    changePage(){\n      this.setState({\n        page: this.state.page + 1\n      })\n      this.loadanimePage()\n    }\n\n    watchedAnime(){\n      // this.setState({\n      //   watchList: this.state.animeList[this.state.i]\n      // })\n      this.state.watchList.push(this.state.animeList[this.state.i])\n      this.nextRandomAnime()\n    }\n\n    render(){\n        var {isLoading, animeList, i} = this.state\n      \n          if (!isLoading){    \n            return(\n              <div>\n                Loading...\n              </div>\n            )\n          }\n          else{\n            return(\n              <div className=\"App\">\n                {/* <div className=\"TopBar\"></div>*/}\n                <div className=\"MainPage\">\n                  <div className=\"Sidebar\">\n                    <ul className=\"SidebarList\">\n                      {/* <h1 className=\"row\" style={{color:\"black\"}} onClick={()=>{window.location.pathname = \"/anime-generator\"}}>Home</h1>\n                      <h2 className=\"row\" style={{color:\"black\"}} onClick={()=>{window.location.pathname = \"/anime-generator/completedanimep\"}}>Watched</h2> */}\n                      <h1 className=\"row\" style={{color:\"black\"}}> <NavLink className=\"NavLink\" to=\"/\">Home</NavLink></h1>\n                      <h2 className=\"row\" style={{color:\"black\"}}> <NavLink className=\"NavLink\" to={{ pathname:\"/completedanime\", state:{listcomplete:this.state.watchList}}}>Watched</NavLink> </h2>\n                      <h2 className=\"row\" style={{color:\"black\"}} onClick={()=>{this.toggleGenre()}}>Genre</h2>\n                      {this.state.showGenre ? GenreData.map((val, key) => {\n                        return(\n                          <li \n                            key={key} \n                            classname=\"row\" \n                            id={val.value===this.state.genre ? \"active\" : \"\"}\n                            onClick={() => {this.getGenre(val.value)}}\n                          >\n                            <div className=\"row\">\n                              <div id=\"icon\">{val.icon}</div>\n                              <div id=\"genre\">{val.genre}</div>\n                            </div>\n                          </li>\n                        )\n                      }) : null}\n                    </ul>\n                  </div>\n\n                  <div className=\"Randomizer\">\n                    <div className=\"Buttons\">\n                      <button onClick={this.watchedAnime}>\n                        Watched\n                      </button>\n                      <button onClick={i < 99 ? this.nextRandomAnime : this.changePage}>\n                        Next Random Anime\n                      </button>\n                    </div>\n\n                    <div className=\"Container\">\n                      <div className=\"Image\">\n                          <img src={animeList[i].image_url} />\n                      </div>\n\n                      <div className=\"Info\">\n                      <h1><a href={animeList[i].url} target=\"_blank\"> {animeList[i].title} </a></h1>\n                      <h3>Year: {animeList[i].airing_start[0]}{animeList[i].airing_start[1]}{animeList[i].airing_start[2]}{animeList[i].airing_start[3]}</h3>\n                      <h3>Episodes: {animeList[i].episodes}</h3>\n                      <h3>Synopsis: <p>{animeList[i].synopsis}</p></h3>\n                      </div>\n                    </div>                    \n                  </div>\n                </div>         \n              </div>\n            )\n          }\n    }\n}\n\nexport default Sidebar","/Users/kevin/Documents/GitHub/anime-generator/src/404.js",[],"/Users/kevin/Documents/GitHub/anime-generator/src/GenreData.js",[],["48","49"],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":4,"column":27,"nodeType":"56","messageId":"57","endLine":4,"endColumn":33},{"ruleId":"54","severity":1,"message":"58","line":4,"column":43,"nodeType":"56","messageId":"57","endLine":4,"endColumn":51},{"ruleId":"54","severity":1,"message":"59","line":5,"column":8,"nodeType":"56","messageId":"57","endLine":5,"endColumn":20},{"ruleId":"54","severity":1,"message":"60","line":8,"column":29,"nodeType":"56","messageId":"57","endLine":8,"endColumn":33},{"ruleId":"61","severity":1,"message":"62","line":29,"column":32,"nodeType":"63","endLine":29,"endColumn":47},{"ruleId":"64","severity":1,"message":"65","line":30,"column":18,"nodeType":"66","endLine":30,"endColumn":46},{"ruleId":"54","severity":1,"message":"67","line":69,"column":27,"nodeType":"56","messageId":"57","endLine":69,"endColumn":36},{"ruleId":"61","severity":1,"message":"62","line":97,"column":42,"nodeType":"63","endLine":97,"endColumn":57},{"ruleId":"64","severity":1,"message":"65","line":98,"column":28,"nodeType":"66","endLine":98,"endColumn":56},{"ruleId":"64","severity":1,"message":"65","line":180,"column":27,"nodeType":"66","endLine":180,"endColumn":63},{"ruleId":"61","severity":1,"message":"62","line":184,"column":54,"nodeType":"63","endLine":184,"endColumn":69},{"ruleId":"50","replacedBy":"68"},{"ruleId":"52","replacedBy":"69"},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'NotFoundPage' is defined but never used.","'Link' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'animeList' is assigned a value but never used.",["70"],["71"],"no-global-assign","no-unsafe-negation"]