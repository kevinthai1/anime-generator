[{"C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\index.js":"1","C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\reportWebVitals.js":"2","C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\App.js":"3","C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\Sidebar.js":"4","C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\CompletedAnime.js":"5","C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\404.js":"6","C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\GenreData.js":"7"},{"size":517,"mtime":1622569772029,"results":"8","hashOfConfig":"9"},{"size":375,"mtime":1622569772029,"results":"10","hashOfConfig":"9"},{"size":813,"mtime":1622569772019,"results":"11","hashOfConfig":"9"},{"size":8137,"mtime":1622570245055,"results":"12","hashOfConfig":"9"},{"size":3415,"mtime":1622569772019,"results":"13","hashOfConfig":"9"},{"size":187,"mtime":1622569772009,"results":"14","hashOfConfig":"9"},{"size":4502,"mtime":1622569772019,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"16ri38j",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\index.js",[],["34","35"],"C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\reportWebVitals.js",[],"C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\App.js",["36","37","38","39"],"import React from 'react'\r\nimport './App.css'\r\nimport Sidebar from './Sidebar'\r\nimport { BrowserRouter as Router, Switch, Redirect } from \"react-router-dom\"\r\nimport NotFoundPage from './404'\r\nimport CompletedAnime from './CompletedAnime'\r\n\r\nimport { HashRouter, Route, Link } from \"react-router-dom\";\r\n\r\nclass App extends React.Component{\r\n\r\n  render(){\r\n      return (\r\n        //HashRouter will read everything after the # in the URL\r\n        <HashRouter> \r\n          <Switch>\r\n          <Route exact path=\"/\" component={Sidebar} />\r\n          <Route path=\"/completedanime\" component={CompletedAnime} />\r\n          {/* <Route exact path=\"/404\"  component={NotFoundPage} />\r\n          <Redirect to=\"/404\" /> Has to be last */}\r\n          </Switch>\r\n        </HashRouter>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\Sidebar.js",["40","41","42","43","44"],"import React from 'react'\r\nimport { GenreData } from './GenreData'\r\nimport { NavLink } from \"react-router-dom\"\r\nimport ReorderIcon from '@material-ui/icons/Reorder'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport CheckIcon from '@material-ui/icons/Check'\r\n\r\nclass Sidebar extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n           animeList: [\"\"],\r\n           i: 0,\r\n           page: 1,\r\n           showSidebar: true,\r\n           watchList: [],\r\n           genre: 1, \r\n            /* \r\n            Action: 1\r\n            Adventure: 2\r\n            Cars: 3\r\n            Comedy: 4\r\n            Dementia: 5\r\n            Demons: 6\r\n            Mystery: 7\r\n            Drama: 8\r\n            Ecchi: 9\r\n            Fantasy: 10\r\n            Game: 11\r\n            Hentai: 12\r\n            Historical: 13\r\n            Horror: 14\r\n            Kids: 15\r\n            Magic: 16\r\n            Martial Arts: 17\r\n            Mecha: 18\r\n            Music: 19\r\n            Parody: 20\r\n            Samurai: 21\r\n            Romance: 22\r\n            School: 23\r\n            Sci Fi: 24\r\n            Shoujo: 25\r\n            Shoujo Ai: 26\r\n            Shounen: 27\r\n            Shounen Ai: 28\r\n            Space: 29\r\n            Sports: 30\r\n            Super Power: 31\r\n            Vampire: 32\r\n            Yaoi: 33\r\n            Yuri: 34\r\n            Harem: 35\r\n            Slice Of Life: 36\r\n            Supernatural: 37\r\n            Military: 38\r\n            Police: 39\r\n            Psychological: 40\r\n            Thriller: 41\r\n            Seinen: 42\r\n            Josei: 43\r\n            */\r\n        }\r\n        this.loadanimePage = this.loadanimePage.bind(this)\r\n        this.nextRandomAnime = this.nextRandomAnime.bind(this)\r\n        this.getGenre = this.getGenre.bind(this)\r\n        this.changePage = this.changePage.bind(this)\r\n        this.watchedAnime = this.watchedAnime.bind(this)\r\n        this.shuffleArray = this.shuffleArray.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.loadanimePage()\r\n    }\r\n\r\n    loadanimePage(){  \r\n        fetch(\"https://jikan1.p.rapidapi.com/genre/anime/\" + this.state.genre + \"/\" + this.state.page, {\r\n          \"method\": \"GET\",\r\n          \"headers\": {\r\n            \"x-rapidapi-key\": \"542c3ca589msh41c910fdd2fb3e6p174e03jsnb59816e25977\",\r\n            \"x-rapidapi-host\": \"jikan1.p.rapidapi.com\"\r\n          }\r\n        })\r\n        .then(res => res.json())\r\n        .then(json => {\r\n          this.setState({\r\n            animeList: json.anime,\r\n            isLoading: true\r\n          })\r\n        })\r\n        console.log(this.state.animeList)\r\n    }\r\n\r\n    nextRandomAnime(){\r\n        this.setState({\r\n            i: this.state.i + 1\r\n        })\r\n    }\r\n\r\n    getGenre(props){\r\n        this.setState({\r\n          genre: props,\r\n          isLoading: false,\r\n          i: 0\r\n        })\r\n        setTimeout(() => {\r\n            this.loadanimePage()\r\n        }, 100)\r\n    }\r\n\r\n    toggleSidebar(){\r\n      this.setState(prevState => ({\r\n        showSidebar: !prevState.showSidebar\r\n      }))\r\n    }\r\n\r\n    changePage(){\r\n      this.setState({\r\n        page: this.state.page + 1\r\n      })\r\n      //this.loadanimePage()\r\n    }\r\n\r\n    watchedAnime(){\r\n      //Adds anime to watchlist using session storage\r\n      const temp = JSON.parse(localStorage.getItem('mylocalStorage') || '[]')\r\n      temp.push(this.state.animeList[this.state.i])\r\n      this.state.watchList.push(this.state.animeList[this.state.i])\r\n      localStorage.setItem('mylocalStorage', JSON.stringify(temp))\r\n\r\n      this.nextRandomAnime()\r\n    }\r\n\r\n    displayAnime(){\r\n      var {animeList, i} = this.state\r\n      const watched = JSON.parse(localStorage.getItem('mylocalStorage') || '[]')\r\n\r\n      for(var j = 0; j < watched.length; j++){\r\n        if(animeList[i].mal_id == watched[j].mal_id){     \r\n          this.nextRandomAnime()  \r\n        }\r\n      }\r\n      \r\n      return(\r\n        <div className=\"Container\">\r\n          <div className=\"Image\">\r\n            <img src={animeList[i].image_url} />\r\n          </div>\r\n          <div className=\"Info\">\r\n            <h1><a style={{textDecoration:\"none\", color:\"blue\"}} href={animeList[i].url} target=\"_blank\"> {animeList[i].title} </a></h1>\r\n            <h3>Year: {animeList[i].airing_start[0]}{animeList[i].airing_start[1]}{animeList[i].airing_start[2]}{animeList[i].airing_start[3]}</h3>\r\n            <h3>Episodes: {animeList[i].episodes}</h3>\r\n            <h3>Synopsis: <p>{animeList[i].synopsis}</p></h3>\r\n          </div>\r\n        </div>  \r\n      )\r\n    }\r\n\r\n    shuffleArray(){\r\n      //https://medium.com/@nitinpatel_20236/how-to-shuffle-correctly-shuffle-an-array-in-javascript-15ea3f84bfb\r\n      var {animeList, i} = this.state\r\n      for(let i = animeList.length - 1; i > 0; i--){\r\n        const j = Math.floor(Math.random() * i)\r\n        const temp = animeList[i]\r\n        animeList[i] = animeList[j]\r\n        animeList[j] = temp\r\n      }\r\n    }\r\n\r\n    render(){\r\n        var {isLoading, animeList, i} = this.state\r\n      \r\n          if (!isLoading){    \r\n            return(\r\n              <div>\r\n                Loading...\r\n              </div>\r\n            )\r\n          }\r\n          else{\r\n            return(\r\n              <div className=\"App\">\r\n                <div className=\"TopBar\">\r\n                  <ReorderIcon onClick={()=>{this.toggleSidebar()}} style={{fontSize:\"40px\", cursor: 'pointer'}}>Sidebar</ReorderIcon>\r\n                  <NavLink className=\"NavLink\" to=\"/\"><HomeIcon style={{fontSize:\"40px\"}}></HomeIcon></NavLink>\r\n                  <NavLink className=\"NavLink\" to={{ pathname:\"/completedanime\", state:{listcomplete:this.state.watchList}}}><CheckIcon style={{fontSize:\"40px\"}}></CheckIcon></NavLink>\r\n                </div>\r\n\r\n                <div className=\"MainPage\">\r\n                  {this.state.showSidebar ? \r\n                  <div className=\"Sidebar\">\r\n                    <ul className=\"SidebarList\">\r\n                      {/* <h1 className=\"row\" style={{color:\"black\"}} onClick={()=>{window.location.pathname = \"/anime-generator\"}}>Home</h1>\r\n                      <h2 className=\"row\" style={{color:\"black\"}} onClick={()=>{window.location.pathname = \"/anime-generator/completedanimep\"}}>Watched</h2>\r\n                      <h1 className=\"row\" style={{color:\"black\"}}> <NavLink className=\"NavLink\" to=\"/\">Home</NavLink></h1>\r\n                      <h2 className=\"row\" style={{color:\"black\"}}> <NavLink className=\"NavLink\" to={{ pathname:\"/completedanime\", state:{listcomplete:this.state.watchList}}}>Watched</NavLink> </h2> */}\r\n                      <h2 style={{color:\"black\", margin:\"10px\", paddingLeft:\"13px\"}}>Genre</h2>\r\n                      {GenreData.map((val, key) => {\r\n                        return(\r\n                          <li \r\n                            key={key} \r\n                            classname=\"row\" \r\n                            id={val.value===this.state.genre ? \"active\" : \"\"}\r\n                            onClick={() => {this.getGenre(val.value)}}\r\n                          >\r\n                            <div className=\"row\">\r\n                              <div id=\"icon\">{val.icon}</div>\r\n                              <div id=\"genre\">{val.genre}</div>\r\n                            </div>\r\n                          </li>\r\n                        )\r\n                      })}\r\n                    </ul>\r\n                  </div> : null}\r\n\r\n                  <div className=\"Randomizer\">\r\n                    <div className=\"Buttons\">\r\n                      <button onClick={this.watchedAnime} style={{margin:\"5px\"}}>\r\n                        Watched\r\n                      </button>\r\n                      <button onClick={i < 99 ? this.nextRandomAnime : this.changePage} style={{margin:\"5px\"}}>\r\n                        Next Anime\r\n                      </button>\r\n                    </div>\r\n\r\n                    {/* {this.shuffleArray()} */}\r\n                    {this.displayAnime()}\r\n                  </div>\r\n                </div>         \r\n              </div>\r\n            )\r\n          }\r\n    }\r\n}\r\n\r\nexport default Sidebar","C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\CompletedAnime.js",["45","46"],"import React from \"react\"\r\nimport {NavLink} from \"react-router-dom\"\r\nimport ReorderIcon from '@material-ui/icons/Reorder'\r\nimport HomeIcon from '@material-ui/icons/Home'\r\nimport CheckIcon from '@material-ui/icons/Check'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nclass CompletedAnime extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n          isLoading: true,\r\n          showSidebar: false,\r\n        }\r\n        this.removeAnime = this.removeAnime.bind(this)\r\n      }\r\n      \r\n      componentDidMount(){\r\n        if (this.props.location.state != null){\r\n\r\n        }\r\n      }\r\n\r\n      toggleSidebar(){\r\n        this.setState(prevState => ({\r\n          showSidebar: !prevState.showSidebar\r\n        }))\r\n      }\r\n\r\n      removeAnime(id, index){\r\n        var watchedList = JSON.parse(localStorage.getItem('mylocalStorage') || '[]');\r\n        const tempWatchedList = Object.assign([], watchedList) //This creates a duplicate array and not just a reference\r\n        tempWatchedList.splice(index, 1)\r\n        localStorage.setItem('mylocalStorage', JSON.stringify(tempWatchedList))\r\n\r\n        window.location.reload(false)\r\n      }\r\n      \r\n        render(props){\r\n          var {isLoading} = this.state\r\n      \r\n          if (!isLoading){    \r\n            return(\r\n              <div>\r\n                Loading...\r\n              </div>\r\n            )\r\n          }\r\n          else{\r\n            var watchedList = JSON.parse(localStorage.getItem('mylocalStorage') || '[]');\r\n            \r\n            return (\r\n              <div className=\"App\">\r\n                <div className=\"TopBar\">\r\n                  <ReorderIcon onClick={()=>{this.toggleSidebar()}} style={{fontSize:\"40px\"}}>Sidebar</ReorderIcon>\r\n                  <NavLink className=\"NavLink\" to=\"/\"><HomeIcon style={{fontSize:\"40px\"}}></HomeIcon></NavLink>\r\n                  <NavLink className=\"NavLink\" to={{ pathname:\"/completedanime\", state:{listcomplete:this.state.watchList}}}><CheckIcon style={{fontSize:\"40px\"}}></CheckIcon></NavLink>\r\n                </div>\r\n\r\n                <div className=\"MainPage\">\r\n\r\n                {this.state.showSidebar ?\r\n                  <div className=\"Sidebar\">\r\n                    <ul className=\"SidebarList\">\r\n                      {/* <h1 className=\"row\" style={{color:\"black\"}} onClick={()=>{window.location.pathname = \"/anime-generator\"}}>Home</h1>\r\n                      <h2 className=\"row\" style={{color:\"black\"}} onClick={()=>{window.location.pathname = \"/anime-generator/completedanimep\"}}>Watched</h2> */}\r\n                    </ul>\r\n                  </div>: null}\r\n\r\n                <div className=\"Watched\">\r\n                  {/* {this.props.location.state.listcomplete.map((list) => ( */}\r\n                  {watchedList.map((list, index) => (\r\n                    <div className=\"WatchedAnime\" key={list.mal_id}>\r\n                      \r\n                        <CloseIcon onClick={()=>{this.removeAnime(list.mal_id, index)}}></CloseIcon>\r\n                        <a style={{textDecoration:\"none\"}} href={list.url} target=\"_blank\"> {list.title} </a>\r\n                        <div className=\"AnimeImage\"><img src={list.image_url} /></div>\r\n                       \r\n                    </div>\r\n                  ))}\r\n                </div>\r\n                </div>\r\n              </div>\r\n            )\r\n          }\r\n        }\r\n}\r\n\r\nexport default CompletedAnime","C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\404.js",[],"C:\\Users\\Panda\\Documents\\GitHub\\anime-generator\\src\\GenreData.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":4,"column":27,"nodeType":"53","messageId":"54","endLine":4,"endColumn":33},{"ruleId":"51","severity":1,"message":"55","line":4,"column":43,"nodeType":"53","messageId":"54","endLine":4,"endColumn":51},{"ruleId":"51","severity":1,"message":"56","line":5,"column":8,"nodeType":"53","messageId":"54","endLine":5,"endColumn":20},{"ruleId":"51","severity":1,"message":"57","line":8,"column":29,"nodeType":"53","messageId":"54","endLine":8,"endColumn":33},{"ruleId":"58","severity":1,"message":"59","line":140,"column":32,"nodeType":"60","messageId":"61","endLine":140,"endColumn":34},{"ruleId":"62","severity":1,"message":"63","line":148,"column":13,"nodeType":"64","endLine":148,"endColumn":49},{"ruleId":"65","severity":1,"message":"66","line":151,"column":90,"nodeType":"67","endLine":151,"endColumn":105},{"ruleId":"51","severity":1,"message":"68","line":162,"column":23,"nodeType":"53","messageId":"54","endLine":162,"endColumn":24},{"ruleId":"51","severity":1,"message":"69","line":172,"column":25,"nodeType":"53","messageId":"54","endLine":172,"endColumn":34},{"ruleId":"65","severity":1,"message":"66","line":76,"column":76,"nodeType":"67","endLine":76,"endColumn":91},{"ruleId":"62","severity":1,"message":"63","line":77,"column":53,"nodeType":"64","endLine":77,"endColumn":81},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","'NotFoundPage' is defined but never used.","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'i' is assigned a value but never used.","'animeList' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]